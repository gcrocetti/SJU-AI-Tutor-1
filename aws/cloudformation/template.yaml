AWSTemplateFormatVersion: '2010-09-09'
Description: 'SJU AI Tutor - Agentic RAG System for Student Retention'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment
    
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
    
  GoogleApiKey:
    Type: String
    NoEcho: true
    Description: Google API Key
    
  GoogleCseId:
    Type: String
    NoEcho: true
    Description: Google Custom Search Engine ID
    
  PineconeApiKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: Pinecone API Key (optional for university agent)
    
  PineconeEnvironment:
    Type: String
    Default: ''
    Description: Pinecone Environment (optional for university agent)
    
  PineconeIndex:
    Type: String
    Default: ''
    Description: Pinecone Index Name (optional for university agent)

Resources:
  # Shared API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub sju-ai-tutor-api-${Environment}
      Description: API Gateway for SJU AI Tutor agents
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  # API Gateway CORS Configuration
  ApiGatewayCorsConfig:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGateway
      
  # API Deployment and Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UniversityAgentMethod
      - MotivatorAgentMethod
      - OrchestratorAgentMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # University Agent Lambda Function
  UniversityAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sju-ai-tutor-university-agent-${Environment}
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sju-ai-tutor-university-agent-${Environment}:latest
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          GOOGLE_API_KEY: !Ref GoogleApiKey
          GOOGLE_CSE_ID: !Ref GoogleCseId
          LOG_LEVEL: INFO
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
          PINECONE_INDEX: !Ref PineconeIndex
          
  # Motivator Agent Lambda Function  
  MotivatorAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sju-ai-tutor-motivator-agent-${Environment}
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sju-ai-tutor-motivator-agent-${Environment}:latest
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          LOG_LEVEL: INFO
          
  # Orchestrator Agent Lambda Function
  OrchestratorAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sju-ai-tutor-orchestrator-agent-${Environment}
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sju-ai-tutor-orchestrator-agent-${Environment}:latest
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 2048
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          GOOGLE_API_KEY: !Ref GoogleApiKey
          GOOGLE_CSE_ID: !Ref GoogleCseId
          LOG_LEVEL: INFO
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
          PINECONE_INDEX: !Ref PineconeIndex
          
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
  # University Agent API Resources
  UniversityAgentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: university
      
  UniversityAgentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UniversityAgentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UniversityAgentFunction.Arn}/invocations
        
  UniversityAgentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UniversityAgentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            
  # Motivator Agent API Resources
  MotivatorAgentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: motivator
      
  MotivatorAgentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref MotivatorAgentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MotivatorAgentFunction.Arn}/invocations
        
  MotivatorAgentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref MotivatorAgentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            
  # Orchestrator Agent API Resources
  OrchestratorAgentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat
      
  OrchestratorAgentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref OrchestratorAgentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrchestratorAgentFunction.Arn}/invocations
        
  OrchestratorAgentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref OrchestratorAgentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Lambda Permissions
  UniversityAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UniversityAgentFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/POST/university
      
  MotivatorAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MotivatorAgentFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/POST/motivator
      
  OrchestratorAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OrchestratorAgentFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Environment}/POST/chat

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    
  UniversityAgentEndpoint:
    Description: University Agent API endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/university
    
  MotivatorAgentEndpoint:
    Description: Motivator Agent API endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/motivator
    
  OrchestratorEndpoint:
    Description: Main Chat API endpoint (Orchestrator)
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/chat